{"version":3,"file":"static/js/33.30cc7037.chunk.js","mappings":"qLAEaA,E,QAAeC,EAAAA,OAAH,se,SCIzB,MAJA,YAA+B,IAAbC,EAAY,EAAZA,SAChB,OAAO,SAACF,EAAD,CAAcG,KAAK,SAAnB,SAA6BD,GACrC,C,iKCDYE,EAAQH,EAAAA,EAAAA,GAAH,wTAgBLI,EAAUJ,EAAAA,EAAAA,EAAH,wFAMPK,EAAcL,EAAAA,EAAAA,IAAH,mYAqBXM,EAAsBN,EAAAA,EAAAA,IAAH,mKASnBO,EAAOP,EAAAA,EAAAA,KAAH,uDAGJQ,EAAWR,EAAAA,EAAAA,EAAH,6CAIRS,EAAYT,EAAAA,EAAAA,GAAH,iFAMTU,EAAeV,EAAAA,EAAAA,IAAH,mEAKZW,EAASX,EAAAA,EAAAA,IAAH,sBAENY,GAAWZ,EAAAA,EAAAA,GAAOa,EAAAA,IAAPb,CAAH,2E,iDCgDrB,MAtGA,WAAyB,IAAD,IACtB,GAA0Bc,EAAAA,EAAAA,UAAS,MAAnC,eAAOC,EAAP,KAAcC,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAEFE,GAAWC,EAAAA,EAAAA,MACXC,GAAeC,EAAAA,EAAAA,QAAM,oBAACH,EAASI,aAAV,aAAC,EAAgBC,YAAjB,QAAyB,KAapD,IAXAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAiBT,GACdU,MAAK,SAAAC,GACJZ,EAASY,EACV,IACAC,OAAM,SAAAC,GACLC,QAAQC,IAAIF,EACb,IACAG,SAAQ,WAAQ,GACpB,GAAE,CAAChB,IAECF,EAIL,OACE,iCACE,UAACmB,EAAA,EAAD,YACE,SAAC,KAAD,CAAMC,GAAId,EAAae,QAAvB,UACE,SAACC,EAAA,EAAD,UAAQ,eAEV,SAAClC,EAAD,iBAAQY,QAAR,IAAQA,OAAR,EAAQA,EAAOuB,SACf,SAAClC,EAAD,iBAAUW,QAAV,IAAUA,OAAV,EAAUA,EAAOwB,WACjB,UAAClC,EAAD,YACE,SAACK,EAAD,UACGK,EAAK,aACJ,SAACJ,EAAD,CACE6B,IAAG,wCAAmCzB,EAAK,aAC3C0B,IAAG,OAAE1B,QAAF,IAAEA,OAAF,EAAEA,EAAOuB,SAGd,SAAC1B,EAAD,OAGJ,UAACN,EAAD,WACGS,EAAK,cACJ,0BACE,SAACR,EAAD,UAAM,YAAe,IACpBmC,KAAKC,MAA8B,GAAxB5B,EAAK,cAAyB,MAE1C,KACHA,EAAK,cACJ,0BACE,SAACR,EAAD,UAAM,aAAe,IAAEQ,EAAK,gBAE5B,KAEHA,EAAK,sBACJ,0BACE,SAACR,EAAD,UAAM,aAAe,IAAEQ,EAAK,qBAAyB,GAAG6B,QAExD,KAEH7B,EAAM8B,QACL,0BACE,SAACtC,EAAD,UAAM,YAAc,IAAEQ,EAAM8B,UAE5B,KAEH9B,EAAK,QAAcA,EAAK,OAAW+B,OAAS,GAC3C,0BACE,SAACvC,EAAD,UAAM,YAAe,IACpBQ,EAAK,OAAWgC,KAAI,SAAAC,GAAK,OAAIA,EAAMJ,IAAV,IAAgBK,KAAK,SAE/C,KACHlC,EAAMmC,SACL,0BACE,SAAC3C,EAAD,UAAM,aAAe,IAAEQ,EAAMmC,QAAQ,UAErC,MAEJ,SAAC1C,EAAD,iBAAWO,QAAX,IAAWA,OAAX,EAAWA,EAAOoC,qBAIxB,UAACjB,EAAA,EAAD,YACE,UAACzB,EAAD,YACE,yBACE,SAAC,KAAD,CAAM0B,GAAG,OAAT,UACE,SAACE,EAAA,EAAD,UAAQ,cAGZ,yBACE,SAAC,KAAD,CAAMF,GAAG,UAAT,UACE,SAACE,EAAA,EAAD,UAAQ,oBAId,SAAC,EAAAe,SAAD,CAAUC,UAAU,SAACC,EAAA,EAAD,IAApB,UACE,SAAC,KAAD,WAKT,C","sources":["components/Button/Button.styled.js","components/Button/Button.jsx","pages/MovieDetails/MovieDetails.styled.js","pages/MovieDetails/MovieDetails.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const ButtonStyled = styled.button`\n  background-image: linear-gradient(\n    to right,\n    #485563 0%,\n    #29323c 51%,\n    #485563 100%\n  );\n  padding: 15px 45px;\n  text-align: center;\n  text-transform: uppercase;\n  transition: 0.5s;\n  background-size: 200% auto;\n  color: white;\n  /* box-shadow: 0 0 20px #eee; */\n  border-radius: 10px;\n  display: block;\n  cursor: pointer;\n\n  &:hover {\n    background-position: right center;\n    color: #fff;\n    text-decoration: none;\n  }\n`;\n","import { ButtonStyled } from './Button.styled';\n\nfunction Button({ children }) {\n  return <ButtonStyled type=\"button\">{children}</ButtonStyled>;\n}\n\nexport default Button;\n","import styled from '@emotion/styled';\nimport { TbMovie } from 'react-icons/tb';\n\nexport const Title = styled.h2`\n  color: #fe6d31;\n  padding-top: 20px;\n  padding-bottom: 5px;\n  position: relative;\n  &::after {\n    content: '';\n    position: absolute;\n    left: 0;\n    bottom: 0;\n    height: 2px;\n    width: 100%;\n    background-image: linear-gradient(to right, #2d2b36, transparent);\n  }\n`;\n\nexport const Tagline = styled.p`\n  padding-bottom: 20px;\n  color: #8f938f;\n  font-size: 14px;\n`;\n\nexport const MainWrapper = styled.div`\n  display: flex;\n  gap: 20px;\n  position: relative;\n  flex-direction: column;\n\n  @media screen and (min-width: 860px) {\n    flex-direction: row;\n  }\n\n  &::after {\n    content: '';\n    position: absolute;\n    left: 0;\n    bottom: -20px;\n    height: 2px;\n    width: 100%;\n    background-image: linear-gradient(to right, #2d2b36, transparent);\n  }\n`;\n\nexport const MovieDetailsWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  padding: 20px;\n  border-radius: 20px;\n  box-shadow: 0px 2px 8px 0px black;\n`;\n\nexport const Span = styled.span`\n  color: var(--second-color);\n`;\nexport const Overview = styled.p`\n  max-width: 600px;\n`;\n\nexport const LinksWrap = styled.ul`\n  display: flex;\n  gap: 20px;\n  padding-bottom: 20px;\n`;\n\nexport const ImageWrapper = styled.div`\n  min-width: 300px;\n  min-height: 450px;\n`;\n\nexport const Poster = styled.img``;\n\nexport const NoPoster = styled(TbMovie)`\n  width: 100%;\n  height: 100%;\n  stroke: white;\n`;\n","import { useState, useEffect, Suspense } from 'react';\nimport { Outlet, useParams, Link } from 'react-router-dom';\nimport {\n  Title,\n  Tagline,\n  MainWrapper,\n  MovieDetailsWrapper,\n  Overview,\n  LinksWrap,\n  Span,\n  ImageWrapper,\n  Poster,\n  NoPoster,\n} from './MovieDetails.styled';\nimport { getMoviesDetails } from 'services/moviesDetailsAPI';\nimport Button from 'components/Button/Button';\nimport { useLocation } from 'react-router-dom';\nimport { useRef } from 'react';\nimport SectionTemplate from 'components/SectionTemplate/SectionTemplate';\nimport Loader from 'components/Loader/Loader';\n\nfunction MovieDetails() {\n  const [movie, setMovie] = useState(null);\n  const { movieId } = useParams();\n\n  const location = useLocation();\n  const backLinkHref = useRef(location.state?.from ?? '/');\n\n  useEffect(() => {\n    getMoviesDetails(movieId)\n      .then(res => {\n        setMovie(res);\n      })\n      .catch(err => {\n        console.log(err);\n      })\n      .finally(() => {});\n  }, [movieId]);\n\n  if (!movie) {\n    return;\n  }\n\n  return (\n    <>\n      <SectionTemplate>\n        <Link to={backLinkHref.current}>\n          <Button>Go Back</Button>\n        </Link>\n        <Title>{movie?.title}</Title>\n        <Tagline>{movie?.tagline}</Tagline>\n        <MainWrapper>\n          <ImageWrapper>\n            {movie['poster_path'] ? (\n              <Poster\n                src={`http://image.tmdb.org/t/p/w300${movie['poster_path']}`}\n                alt={movie?.title}\n              />\n            ) : (\n              <NoPoster />\n            )}\n          </ImageWrapper>\n          <MovieDetailsWrapper>\n            {movie['vote_average'] ? (\n              <p>\n                <Span>Rating:</Span>{' '}\n                {Math.round(movie['vote_average'] * 10) / 10}\n              </p>\n            ) : null}\n            {movie['release_date'] ? (\n              <p>\n                <Span>Release:</Span> {movie['release_date']}\n              </p>\n            ) : null}\n\n            {movie['production_countries'] ? (\n              <p>\n                <Span>Country:</Span> {movie['production_countries'][0].name}\n              </p>\n            ) : null}\n\n            {movie.budget ? (\n              <p>\n                <Span>Budget:</Span> {movie.budget}\n              </p>\n            ) : null}\n\n            {movie['genres'] && movie['genres'].length > 0 ? (\n              <p>\n                <Span>Genres:</Span>{' '}\n                {movie['genres'].map(genre => genre.name).join(', ')}\n              </p>\n            ) : null}\n            {movie.runtime ? (\n              <p>\n                <Span>Runtime:</Span> {movie.runtime} min\n              </p>\n            ) : null}\n\n            <Overview>{movie?.overview}</Overview>\n          </MovieDetailsWrapper>\n        </MainWrapper>\n      </SectionTemplate>\n      <SectionTemplate>\n        <LinksWrap>\n          <li>\n            <Link to=\"cast\">\n              <Button>Cast</Button>\n            </Link>\n          </li>\n          <li>\n            <Link to=\"reviews\">\n              <Button>Reviews</Button>\n            </Link>\n          </li>\n        </LinksWrap>\n        <Suspense fallback={<Loader />}>\n          <Outlet />\n        </Suspense>\n      </SectionTemplate>\n    </>\n  );\n}\nexport default MovieDetails;\n"],"names":["ButtonStyled","styled","children","type","Title","Tagline","MainWrapper","MovieDetailsWrapper","Span","Overview","LinksWrap","ImageWrapper","Poster","NoPoster","TbMovie","useState","movie","setMovie","movieId","useParams","location","useLocation","backLinkHref","useRef","state","from","useEffect","getMoviesDetails","then","res","catch","err","console","log","finally","SectionTemplate","to","current","Button","title","tagline","src","alt","Math","round","name","budget","length","map","genre","join","runtime","overview","Suspense","fallback","Loader"],"sourceRoot":""}