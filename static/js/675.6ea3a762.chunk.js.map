{"version":3,"file":"static/js/675.6ea3a762.chunk.js","mappings":"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","sources":["services/tvAPI.js","components/TvShows/GenrePanel/GenrePanel.styled.js","components/TvShows/GenrePanel/GenrePanel.jsx","components/TvShows/Trending/Trending.jsx","components/TvShows/TopRated/TopRated.jsx","pages/TvShows.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = 'c7dd7652c2a2bbf7bac5e128508653f3';\nconst API_BASE_URL = 'https://api.themoviedb.org/3';\naxios.defaults.baseURL = API_BASE_URL;\n\n// TV Shows        https://api.themoviedb.org/3   /trending/tv/day      ?language=en-US\n// Search by name: https://api.themoviedb.org/3   /search/tv            ?query=iron&include_adult=false&language=en-US&page=1\n// Genres          https://api.themoviedb.org/3   /genre/tv/list\n// Top Rated       https://api.themoviedb.org/3   /tv/top_rated\n// Tv by genre     https://api.themoviedb.org/3   /discover/tv          ?include_adult=false&include_null_first_air_dates=false&language=en-US&page=1&sort_by=popularity.desc\n\nconst TV_API = {\n  trending: '/trending/tv/day',\n  tvSearch: '/search/tv',\n  genres: '/genre/tv/list',\n  topRated: '/tv/top_rated',\n  tvByGenre: '/discover/tv',\n};\n\nexport const getTvTrendingList = async () => {\n  try {\n    const result = await axios.get(TV_API.trending, {\n      params: { api_key: API_KEY, language: 'en-US' },\n    });\n    return result.data;\n  } catch (error) {\n    throw new Error(error.response.data.message);\n  }\n};\n\nexport const getTvGenres = async () => {\n  try {\n    const result = await axios.get(TV_API.genres, {\n      params: { api_key: API_KEY },\n    });\n    return result.data;\n  } catch (error) {\n    throw new Error(error.response.data.message);\n  }\n};\n\nexport const getTvTopRated = async () => {\n  try {\n    const result = await axios.get(TV_API.topRated, {\n      params: { api_key: API_KEY, language: 'en-US' },\n    });\n    return result.data;\n  } catch (error) {\n    throw new Error(error.response.data.message);\n  }\n};\n\nexport const getTvSearch = async query => {\n  try {\n    const result = await axios.get(TV_API.moviesSearch, {\n      params: { query: { query }, api_key: API_KEY, language: 'en-US' },\n    });\n    return result.data;\n  } catch (error) {\n    throw new Error(error.response.data.message);\n  }\n};\n\nexport const getTvByGenre = async genre => {\n  try {\n    const result = await axios.get(TV_API.tvByGenre, {\n      params: {\n        include_null_first_air_dates: false,\n        include_adult: false,\n        api_key: API_KEY,\n        include_video: false,\n        language: 'en-US',\n        page: 1,\n        sort_by: 'popularity.desc',\n        with_genres: { genre },\n      },\n    });\n    return result.data;\n  } catch (error) {\n    throw new Error(error.response.data.message);\n  }\n};\n","import styled from '@emotion/styled';\n\nexport const GenreList = styled.ul`\n  display: flex;\n  gap: 20px;\n  flex-wrap: wrap;\n  padding: 10px;\n  justify-content: center;\n  box-shadow: 0px 5px 5px 0px rgba(0, 0, 0, 0.2);\n`;\n\nexport const GenreName = styled.p`\n  font-size: 12px;\n  color: #8f938f;\n`;\n","import { useState, useEffect } from 'react';\nimport { getTvGenres } from 'services/tvAPI';\nimport { GenreList, GenreName } from './GenrePanel.styled';\nimport { toast } from 'react-toastify';\n\nfunction GenrePanel() {\n  const [error, setError] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [array, setArray] = useState([]);\n\n  useEffect(() => {\n    setLoading(true);\n\n    getTvGenres()\n      .then(({ genres }) => {\n        setArray(genres);\n      })\n      .catch(err => {\n        setError(true);\n        console.log(err);\n      })\n      .finally(() => {\n        setLoading(false);\n      });\n  }, []);\n\n  if (error) {\n    toast.error('Sorry for the inconvenience! Try again later.', {\n      position: 'top-right',\n      autoClose: 5000,\n      hideProgressBar: false,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: true,\n      progress: undefined,\n      theme: 'colored',\n    });\n  }\n\n  if (loading) {\n    return (\n      <>\n        <p>Loading...</p>\n      </>\n    );\n  }\n\n  return (\n    <>\n      <GenreList>\n        {array.map(genre => (\n          <GenreName key={genre.id}>{genre.name}</GenreName>\n        ))}\n      </GenreList>\n    </>\n  );\n}\nexport default GenrePanel;\n","import { useState, useEffect } from 'react';\nimport { getTvTrendingList } from 'services/tvAPI';\nimport Card from 'components/Card/Card';\nimport ListTemplate from 'components/ListTemplate/ListTemplate';\nimport TitleTemplate from 'components/TitleTemplate/TitleTemplate';\nimport Loading from 'components/Loading/Loading';\nimport { toast } from 'react-toastify';\n\nfunction Trending() {\n  const [error, setError] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [trendingArray, setTrendingArray] = useState([]);\n\n  useEffect(() => {\n    setLoading(true);\n\n    getTvTrendingList()\n      .then(({ results }) => {\n        setTrendingArray(results);\n      })\n      .catch(err => {\n        setError(true);\n        console.log(err);\n      })\n      .finally(() => {\n        setLoading(false);\n      });\n  }, []);\n\n  if (error) {\n    toast.error('Sorry for the inconvenience! Try again later.', {\n      position: 'top-right',\n      autoClose: 5000,\n      hideProgressBar: false,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: true,\n      progress: undefined,\n      theme: 'colored',\n    });\n  }\n\n  if (loading) {\n    return (\n      <>\n        <TitleTemplate>Trending list...</TitleTemplate>\n        <Loading />\n      </>\n    );\n  }\n\n  return (\n    <div>\n      <TitleTemplate>Trending list</TitleTemplate>\n      <ListTemplate>\n        {trendingArray.map(movie => (\n          <Card\n            key={movie.id}\n            movieId={movie.id}\n            title={movie.title || movie.name}\n            poster={movie['poster_path']}\n            type={movie['media_type']}\n            rating={movie['vote_average']}\n            date={movie['release_date']}\n          />\n        ))}\n      </ListTemplate>\n    </div>\n  );\n}\nexport default Trending;\n","import { useState, useEffect } from 'react';\nimport { getTvTopRated } from 'services/tvAPI';\nimport Card from 'components/Card/Card';\nimport ListTemplate from 'components/ListTemplate/ListTemplate';\nimport TitleTemplate from 'components/TitleTemplate/TitleTemplate';\nimport Loading from 'components/Loading/Loading';\nimport { toast } from 'react-toastify';\n\nfunction TopRated() {\n  const [error, setError] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [array, setArray] = useState([]);\n\n  useEffect(() => {\n    setLoading(true);\n\n    getTvTopRated()\n      .then(({ results }) => {\n        setArray(results);\n      })\n      .catch(err => {\n        setError(true);\n        console.log(err);\n      })\n      .finally(() => {\n        setLoading(false);\n      });\n  }, []);\n\n  if (error) {\n    toast.error('Sorry for the inconvenience! Try again later.', {\n      position: 'top-right',\n      autoClose: 5000,\n      hideProgressBar: false,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: true,\n      progress: undefined,\n      theme: 'colored',\n    });\n  }\n\n  if (loading) {\n    return (\n      <>\n        <TitleTemplate>Top Rated...</TitleTemplate>\n        <Loading />\n      </>\n    );\n  }\n\n  return (\n    <div>\n      <TitleTemplate>Top Rated</TitleTemplate>\n      <ListTemplate>\n        {array.map(movie => (\n          <Card\n            key={movie.id}\n            movieId={movie.id}\n            title={movie.title || movie.name}\n            poster={movie['poster_path']}\n            type=\"tv\"\n            rating={movie['vote_average']}\n            date={movie['release_date']}\n          />\n        ))}\n      </ListTemplate>\n    </div>\n  );\n}\nexport default TopRated;\n","import GenrePanel from 'components/TvShows/GenrePanel/GenrePanel';\nimport Trending from 'components/TvShows/Trending/Trending';\nimport TopRated from 'components/TvShows/TopRated/TopRated';\nimport SectionTemplate from 'components/SectionTemplate/SectionTemplate';\n\nfunction TvShows() {\n  return (\n    <>\n      <GenrePanel />\n      <SectionTemplate>\n        <TopRated />\n        <Trending />\n      </SectionTemplate>\n    </>\n  );\n}\nexport default TvShows;\n"],"names":["API_KEY","axios","TV_API","trending","tvSearch","genres","topRated","tvByGenre","getTvTrendingList","params","api_key","language","result","data","Error","response","message","getTvGenres","getTvTopRated","GenreList","styled","GenreName","useState","error","setError","loading","setLoading","array","setArray","useEffect","then","catch","err","console","log","finally","toast","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","theme","map","genre","name","id","trendingArray","setTrendingArray","results","TitleTemplate","Loading","ListTemplate","movie","Card","movieId","title","poster","type","rating","date","SectionTemplate"],"sourceRoot":""}